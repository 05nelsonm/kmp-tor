name: Test

on: pull_request

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        java-version: [ 11, 16 ]
        job: [ test ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Setup JDK
        uses: actions/setup-java@v3.4.0
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: true

      - name: Run MacOS Tests
        if: matrix.os == 'macos-latest' && matrix.job == 'test'
        run: >
          ./gradlew check --stacktrace
          -PKMP_TARGETS="JVM,JS,IOS_ARM32,IOS_ARM64,IOS_X64,IOS_SIMULATOR_ARM64,MACOS_ARM64,MACOS_X64,TVOS_ARM64,TVOS_X64,TVOS_SIMULATOR_ARM64,WATCHOS_ARM32,WATCHOS_ARM64,WATCHOS_X64,WATCHOS_X86,WATCHOS_SIMULATOR_ARM64,WASM_32"

      - name: Run Linux Tests
        if: matrix.os == 'ubuntu-latest' && matrix.job == 'test'
        run: >
          ./gradlew check --stacktrace
          -PKMP_TARGETS="JVM,JS,ANDROID,ANDROID_ARM32,ANDROID_ARM64,ANDROID_X64,ANDROID_X86,LINUX_ARM32HFP,LINUX_ARM64,LINUX_MIPS32,LINUX_MIPSEL32,LINUX_X64,WASM_32"

      - name: Run Windows Tests
        if: matrix.os == 'windows-latest' && matrix.job == 'test' && matrix.java-version == 11
        run: >
          ./gradlew check --stacktrace
          -PKMP_TARGETS="JVM,JS,MINGW_X64,MINGW_X86,WASM_32"

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dkotlin.incremental=false -Dorg.gradle.jvmargs="-XX:+HeapDumpOnOutOfMemoryError -XX:MetaspaceSize=1g"
