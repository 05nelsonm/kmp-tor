/*
 * Copyright (c) 2022 Matthew Nelson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/
import io.matthewnelson.kotlin.components.dependencies.versions
import kmp.tor.env

plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.openjfx.javafxplugin' version '0.0.11'
}

// disregard. this is for playing with newly published binaries prior to release
if (env.kmpTorBinaries.pollStagingRepo) {
    repositories {
        maven {
            url { "https://oss.sonatype.org/content/groups/staging" }
            credentials {
                username rootProject.ext.get("mavenCentralUsername").toString()
                password rootProject.ext.get("mavenCentralPassword").toString()
            }
        }
    }
}

// For SNAPSHOTS. disregard
repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

javafx {
    modules = [ 'javafx.controls' ]
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

mainClassName = 'io.matthewnelson.kmp.tor.sample.java.javafx.App'

dependencies {

    // For SNAPSHOTS disregard
//    implementation("io.matthewnelson.kotlin-components:kmp-tor:${env.kmpTorAll.version.name}")
//    implementation("io.matthewnelson.kotlin-components:kmp-tor-ext-callback-manager:${env.kmpTor.version.name}")

    def vTor = versions.components.kmptor.binary
    def vKmpTor = versions.components.kmptor.kmptor

    // kmp-tor dependency
    implementation("io.matthewnelson.kotlin-components:kmp-tor:$vTor+$vKmpTor")
    // kmp-tor callback extension
    implementation("io.matthewnelson.kotlin-components:kmp-tor-ext-callback-manager:$vKmpTor")

    // Even through kmp-tor comes with coroutines under the hood
    // and expressing the dependency is _not_ needed in kotlin
    // projects, it _is_ needed in Java only projects.
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-javafx:${versions.kotlin.coroutines}")

    // Add binary dependencies for platform desired to support. Note that this
    // could also be broken out into package variants so you aren't unnecessarily
    // including windows/macos binaries in the .deb package, for example.
    def osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("windows")) {
        implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-mingwx64:${env.kmpTorBinaries.version.name}")
    } else if (osName.contains("mac") || osName.contains("darwin")) {
        implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-macosx64:${env.kmpTorBinaries.version.name}")
    } else if (osName.contains("linux")) {
        implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-linuxx64:${env.kmpTorBinaries.version.name}")

        // Add support for Unix Domain Sockets (only available for Linux)
        implementation("io.matthewnelson.kotlin-components:kmp-tor-ext-unix-socket:$vKmpTor")
    } else {
        throw GradleException("Faild to determine Operating System from os.name='$osName'")
    }

    // Only supporting x86_64 (x64) for this sample
//  implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-linuxx86:${env.kmpTorBinaries.version.name}")
//  implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-macosarm64:${env.kmpTorBinaries.version.name}")
//  implementation("io.matthewnelson.kotlin-components:kmp-tor-binary-mingwx86:${env.kmpTorBinaries.version.name}")
}
